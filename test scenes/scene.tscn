[gd_scene load_steps=44 format=2]

[ext_resource path="res://shaders/color_reductor.tres" type="Shader" id=1]
[ext_resource path="res://shaders/animated_noise_then_color.shader" type="Shader" id=2]
[ext_resource path="res://shaders/noise_animated.shader" type="Shader" id=3]
[ext_resource path="res://shaders/noise_then_color.shader" type="Shader" id=4]
[ext_resource path="res://shaders/dither.shader" type="Shader" id=5]
[ext_resource path="res://shaders/noise_and_color.shader" type="Shader" id=6]
[ext_resource path="res://shaders/ditherpsx.shader" type="Shader" id=7]
[ext_resource path="res://test scenes/scene.gd" type="Script" id=8]
[ext_resource path="res://shaders/dither_resources/bayer16tile2.png" type="Texture" id=9]
[ext_resource path="res://characters/player.tscn" type="PackedScene" id=10]
[ext_resource path="res://assets/claustro_1_png.png" type="Texture" id=11]
[ext_resource path="res://shaders/color_palettes/2x_monas2.png" type="Texture" id=12]
[ext_resource path="res://shaders/dither_resources/bayer4tile8.png" type="Texture" id=13]
[ext_resource path="res://shaders/color_palettes/moonlight4.png" type="Texture" id=14]
[ext_resource path="res://shaders/color_palettes/commodore64-1x.png" type="Texture" id=15]
[ext_resource path="res://assets/claustro_1_sin_grano_png.png" type="Texture" id=16]
[ext_resource path="res://addons/dialogic/Dialog.tscn" type="PackedScene" id=17]
[ext_resource path="res://assets/Bliss_(Windows_XP).png" type="Texture" id=18]
[ext_resource path="res://characters/compa.tscn" type="PackedScene" id=19]
[ext_resource path="res://shaders/dither_resources/bayer8tile4.png" type="Texture" id=20]
[ext_resource path="res://shaders/optimized_color_reductor.tres" type="Shader" id=21]
[ext_resource path="res://shaders/color_reductor.shader" type="Shader" id=22]
[ext_resource path="res://shaders/GLES2 anim noise color.tscn" type="PackedScene" id=23]

[sub_resource type="BoxShape" id=1]

[sub_resource type="CubeMesh" id=2]

[sub_resource type="ShaderMaterial" id=14]
shader = ExtResource( 21 )
shader_param/palette_size = 2
shader_param/palette = ExtResource( 12 )

[sub_resource type="ShaderMaterial" id=3]
shader = ExtResource( 22 )
shader_param/palette_size = 3
shader_param/palette = ExtResource( 12 )

[sub_resource type="ShaderMaterial" id=4]
shader = ExtResource( 1 )
shader_param/palette_size = 16
shader_param/palette = ExtResource( 15 )

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

// Uniforms
uniform float grain_amount : hint_range(0.0, 1.0) = 0.05; // Adjust the amount of grain
uniform float grain_size : hint_range(0.1, 10.0) = 1.0; // Adjust the size of the grain

void fragment() {
    // Sample the original screen texture
    vec4 original_color = texture(SCREEN_TEXTURE, SCREEN_UV);

    // Generate random noise
    float noise = (fract(sin(dot(UV, vec2(12.9898, 78.233))) * 43758.5453) - 0.5) * 2.0;

    // Add noise to the original color
    original_color.rgb += noise * grain_amount * grain_size;

    // Clamp the final color to make sure it stays in the valid range
    COLOR = clamp(original_color, 0.0, 1.0);
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/grain_amount = 0.05
shader_param/grain_size = 1.8

[sub_resource type="ShaderMaterial" id=10]
shader = ExtResource( 3 )
shader_param/grain_amount = 0.051
shader_param/grain_size = 3.334
shader_param/speed = 0.192

[sub_resource type="ShaderMaterial" id=7]
shader = ExtResource( 6 )
shader_param/grain_amount = 0.05
shader_param/grain_size = 1.0
shader_param/palette_size = 4
shader_param/palette = ExtResource( 12 )

[sub_resource type="ShaderMaterial" id=8]
shader = ExtResource( 7 )
shader_param/col_depth = 15.0
shader_param/dither_banding = true
shader_param/dither_tex = ExtResource( 13 )

[sub_resource type="ShaderMaterial" id=9]
shader = ExtResource( 5 )
shader_param/col_size = 5
shader_param/u_bit_depth = 32
shader_param/u_contrast = 1.0
shader_param/u_offset = -0.153
shader_param/u_dither_size = 2
shader_param/u_dither_texture_size = 32
shader_param/u_dither_tex = ExtResource( 9 )
shader_param/u_color_tex = ExtResource( 14 )

[sub_resource type="ShaderMaterial" id=11]
shader = ExtResource( 4 )
shader_param/grain_amount = 0.007
shader_param/grain_size = 10.0
shader_param/palette_size = 3
shader_param/palette = ExtResource( 12 )

[sub_resource type="ShaderMaterial" id=12]
shader = ExtResource( 2 )
shader_param/grain_amount = 0.16
shader_param/grain_size = 0.469
shader_param/speed = 1.0
shader_param/palette_size = 3
shader_param/palette = ExtResource( 12 )

[sub_resource type="ShaderMaterial" id=13]
shader = ExtResource( 5 )
shader_param/col_size = 4
shader_param/u_bit_depth = 32
shader_param/u_contrast = 1.171
shader_param/u_offset = 0.0
shader_param/u_dither_size = 2
shader_param/u_dither_texture_size = 32
shader_param/u_dither_tex = ExtResource( 20 )
shader_param/u_color_tex = ExtResource( 12 )

[sub_resource type="Shader" id=15]
code = "
shader_type canvas_item;

uniform float num_channels = 20.0f;
uniform bool dithering = false;
uniform float dithering_amount = 0.5f;

uniform float screen_size_x = 1024;
uniform float screen_size_y = 600;

bool xor(bool a, bool b) {
	return (a || b) && !(a && b);
}


float dither(float col, bool x_true, bool y_true) {
	float channel = round(col);
	if(abs((floor(col) + 0.5f) - col) < dithering_amount || abs((ceil(col) - 0.5f) - col) < dithering_amount) {
		if(x_true && y_true) {
			return channel - 1.0f;
		}
		else {
			return channel;
		}
	}
	return channel;
}


// quantises the colour of each pixel, and optionally adds a dither effect to the quantisation
void fragment() {
	vec3 col = texture(SCREEN_TEXTURE, SCREEN_UV).xyz;
	
	if(dithering) {
		bool x_true = mod(SCREEN_UV.x * float(screen_size_x), 3.0f) < 0.99f;
		bool y_true = mod(SCREEN_UV.y * float(screen_size_y), 3.0f) < 0.99f;
		
		col *= num_channels;
		
		col.x = dither(col.x, x_true, y_true);
		col.x = col.x / num_channels;
		
		col.y = dither(col.y, x_true, y_true);
		col.y = col.y / num_channels;
		
		col.z = dither(col.z, x_true, y_true);
		col.z = col.z / num_channels;
	}
	else {
		col *= num_channels;
		col.x = round(col.x) / num_channels;
		col.y = round(col.y) / num_channels;
		col.z = round(col.z) / num_channels;
	}
	
	COLOR.xyz = col;
}"

[sub_resource type="ShaderMaterial" id=16]
shader = SubResource( 15 )
shader_param/num_channels = 8.0
shader_param/dithering = true
shader_param/dithering_amount = 0.5
shader_param/screen_size_x = 1.0
shader_param/screen_size_y = 300.0

[sub_resource type="Shader" id=17]
code = "shader_type canvas_item;

uniform float pixel = 1.0;
uniform sampler2D pallete;

const float bit = 6.0;
const mat4 bayer = mat4(
	vec4(1.0,  9.0,  3.0, 11.0),
    vec4(13.0,  5.0, 15.0,  7.0),
    vec4(4.0, 12.0,  2.0, 10.0),
    vec4(16.0,  8.0, 14.0,  6.0));

float getbayer(int x, int y) {
	if (x == 0) {
		if (y == 0) return bayer[0][0];
		if (y == 1) return bayer[0][1];
		if (y == 2) return bayer[0][2];
		if (y == 3) return bayer[0][3];
	}
	else if (x == 1) {
		if (y == 0) return bayer[1][0];
		if (y == 1) return bayer[1][1];
		if (y == 2) return bayer[1][2];
		if (y == 3) return bayer[1][3];
	}
	else if (x == 2) {
		if (y == 0) return bayer[2][0];
		if (y == 1) return bayer[2][1];
		if (y == 2) return bayer[2][2];
		if (y == 3) return bayer[2][3];
	}
	else if (x == 3) {
		if (y == 0) return bayer[3][0];
		if (y == 1) return bayer[3][1];
		if (y == 2) return bayer[3][2];
		if (y == 3) return bayer[3][3];
	}
}


void fragment() {
	vec4 original = texture(TEXTURE, UV);
	vec4 _color = texture(SCREEN_TEXTURE, floor(FRAGCOORD.xy / pixel) / floor((1.0 / SCREEN_PIXEL_SIZE) / pixel));
	vec4 color = _color * texture(pallete, vec2(_color.r, 1.0));
	
	
	float b = getbayer(int(FRAGCOORD.x) % 4, int(FRAGCOORD.y) % 4);// * 1.0) / 1.0;
	vec2 uv = FRAGCOORD.xy / SCREEN_PIXEL_SIZE;
	vec4 col_noise = color;
	vec3 noise = vec3(fract(sin(dot(FRAGCOORD.xy / SCREEN_PIXEL_SIZE, vec2(12.9898, 78.233))) * 43758.5453));
	noise *= 0.1;
	noise.xy *= (b / 16.0) * 1.5;
	col_noise.rgb += noise; //noise effect
	
	vec4 post = col_noise * floor(col_noise * 4.0) / 4.0; //noise + post-effect
	
	
	
	COLOR *= post;
	
	
}"

[sub_resource type="ShaderMaterial" id=18]
shader = SubResource( 17 )
shader_param/pixel = 1.0
shader_param/pallete = ExtResource( 12 )

[sub_resource type="Shader" id=19]
code = "shader_type canvas_item;


//uniform float num_channels = 20.0f;
uniform float pixel = 1.0;
uniform sampler2D pallete;


void fragment() {
	vec4 _color = texture(SCREEN_TEXTURE, floor(FRAGCOORD.xy / pixel) / floor((1.0 / SCREEN_PIXEL_SIZE) / pixel));
	vec4 color = _color * texture(pallete, vec2(_color.r, 1.0));
	
//	vec2 uv = FRAGCOORD.xy / SCREEN_PIXEL_SIZE;
//	vec4 col_noise = color;
//	vec3 noise = vec3(fract(sin(dot(FRAGCOORD.xy / SCREEN_PIXEL_SIZE, vec2(12.9898, 78.233))) * 43758.5453));
//	noise *= 0.1;
//	col_noise.rgb += noise; //noise effect
//
//	vec4 post = col_noise * floor(col_noise * 4.0) / 4.0; //noise + post-effect
	//vec3 colormod= COLOR.rgb * num_channels;
	//COLOR.rgb = round(colormod)/num_channels;
	
	COLOR *= texture(pallete, vec2(_color.r, 1.0));
	
//	vec3 dithered_color = base_color.rgb * col_depth + dith * (dither_banding ? 1.0 : 0.0);
    
    // Redondea el color a la profundidad de color deseada y divide para normalizar
  //  COLOR.rgb = round(dithered_color) / col_depth;
	
}"

[sub_resource type="ShaderMaterial" id=20]
shader = SubResource( 19 )
shader_param/pixel = 4.0
shader_param/pallete = ExtResource( 12 )

[node name="Spatial" type="Spatial"]
script = ExtResource( 8 )

[node name="player" parent="." instance=ExtResource( 10 )]
transform = Transform( -0.814176, 0, 0.580618, 0, 1, 0, -0.580618, 0, -0.814176, 0, -1.2036, -0.958059 )

[node name="compa" parent="." instance=ExtResource( 19 )]
transform = Transform( -0.495959, 0, 0.868346, 0, 1, 0, -0.868346, 0, -0.495959, 1.20864, -1.204, -1.25122 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 2.65977 )
current = true
fov = 44.7

[node name="claustro" type="Sprite3D" parent="."]
transform = Transform( 7, 0, 0, 0, 7, 0, 0, 0, 1, 0, -0.151548, -47.6527 )
visible = false
texture = ExtResource( 11 )

[node name="claustro sin grano" type="Sprite3D" parent="."]
transform = Transform( 7, 0, 0, 0, 7, 0, 0, 0, 1, 0, -0.151548, -47.6527 )
texture = ExtResource( 16 )

[node name="bliss" type="Sprite3D" parent="."]
transform = Transform( 27, 0, 0, 0, 27, 0, 0, 0, 1, 0, -0.151548, -48.1181 )
texture = ExtResource( 18 )

[node name="Dialog" parent="." instance=ExtResource( 17 )]
visible = false
timeline = "timeline-1728748043.json"

[node name="floor" type="StaticBody" parent="."]
transform = Transform( 20, 0, 0, 0, 0.994697, 2.05689, 0, -0.102845, 19.8939, 0, -2.57764, -1.01181 )
visible = false

[node name="CollisionShape" type="CollisionShape" parent="floor"]
shape = SubResource( 1 )

[node name="MeshInstance" type="MeshInstance" parent="floor"]
mesh = SubResource( 2 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.269444 )
light_color = Color( 0.768627, 0.756863, 0.54902, 1 )

[node name="shaders" type="Control" parent="."]
margin_right = 40.0
margin_bottom = 40.0

[node name="OptiColorRect" type="ColorRect" parent="shaders"]
visible = false
material = SubResource( 14 )
margin_right = 1037.0
margin_bottom = 616.0

[node name="ColorReductor" type="ColorRect" parent="shaders"]
visible = false
material = SubResource( 3 )
margin_right = 1027.0
margin_bottom = 605.0

[node name="ColorReductor 2" type="ColorRect" parent="shaders"]
visible = false
material = SubResource( 4 )
margin_right = 1044.0
margin_bottom = 616.0

[node name="noise" type="ColorRect" parent="shaders"]
visible = false
material = SubResource( 6 )
margin_right = 1035.0
margin_bottom = 620.0

[node name="animated noise" type="ColorRect" parent="shaders"]
visible = false
material = SubResource( 10 )
margin_right = 1025.0
margin_bottom = 603.0

[node name="color and noise" type="ColorRect" parent="shaders"]
visible = false
material = SubResource( 7 )
margin_right = 1041.0
margin_bottom = 611.0

[node name="dither banding psx" type="ColorRect" parent="shaders"]
visible = false
material = SubResource( 8 )
margin_right = 1029.0
margin_bottom = 609.0

[node name="dither" type="ColorRect" parent="shaders"]
visible = false
material = SubResource( 9 )
margin_right = 1037.0
margin_bottom = 599.0

[node name="Noise then color" type="ColorRect" parent="shaders"]
visible = false
material = SubResource( 11 )
margin_right = 1034.0
margin_bottom = 614.0

[node name="anim noise then color" type="ColorRect" parent="shaders"]
visible = false
material = SubResource( 12 )
margin_right = 1031.0
margin_bottom = 609.0

[node name="dither 2" type="ColorRect" parent="shaders"]
visible = false
material = SubResource( 13 )
margin_right = 1024.0
margin_bottom = 607.0

[node name="NewDith" type="ColorRect" parent="shaders"]
visible = false
material = SubResource( 16 )
margin_right = 1047.0
margin_bottom = 632.0

[node name="palette1" type="ColorRect" parent="shaders"]
visible = false
material = SubResource( 18 )
margin_right = 1031.0
margin_bottom = 616.0

[node name="filtro gradiente" type="ColorRect" parent="shaders"]
visible = false
material = SubResource( 20 )
margin_right = 1064.0
margin_bottom = 631.0

[node name="GLES2 anim noise color" parent="shaders" instance=ExtResource( 23 )]
